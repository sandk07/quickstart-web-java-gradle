task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

project(':web') {

	apply plugin: 'java'
	apply plugin: 'war'
	apply plugin: 'pmd'
	apply plugin: "jdepend"
	apply plugin: 'sonar-runner'
	apply plugin: 'maven'
	apply plugin: 'maven-publish'	
	apply plugin: 'com.bmuschko.cargo'

	repositories {
		maven {
			url jcenterLocalRepoPath
			credentials {
				username = repoUserName
				password = repoPassword
			}
		}
		maven {
			url mavenLocalRepoPath
			credentials {
				username = repoUserName
				password = repoPassword
			}
		}
		//jcenter()
		//mavenCentral()
		
	}

	dependencies {
	    compile group: 'commons-io', name: 'commons-io', version: '1.4'
	    compile group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'
        }

	sourceSets {
		integrationTest {
			java.srcDir file("src/test-integration/java")
			resources.srcDir file("src/test-integration/resources")
			compileClasspath = sourceSets.main.output + configurations.testRuntime
			runtimeClasspath = output + compileClasspath
		}
		performanceTest {
			java.srcDir file("src/test-performance/java")
			resources.srcDir file("src/test-performance/resources")
			compileClasspath = sourceSets.main.output + configurations.testRuntime
			runtimeClasspath = output + compileClasspath
		}
		functionalTest {
			java.srcDir file("src/test-functional/java")
			resources.srcDir file("src/test-functional/resources")
			compileClasspath = sourceSets.main.output + configurations.testRuntime
			runtimeClasspath = output + compileClasspath
		}
	}

	task createBuildInfoFile << {
		def buildInfoFile = new File("$buildDir/build-info.properties")
		Properties props = new Properties()
		props.setProperty('version', project.version.toString())
		props.setProperty('timestamp', project.buildTimestamp)
		props.store(buildInfoFile.newWriter(), null)
	}
	
	war {
		dependsOn createBuildInfoFile
		baseName = appName
		
		from(buildDir) {
			include 'build-info.properties'
			into('WEB-INF/classes')
		}
	}

	pmd {
		ignoreFailures = true
	}
	tasks.withType(Pmd) {
		reports {
			xml.enabled = false
			html.enabled = true
		}
	}
	
	jdepend {
		toolVersion = '2.9.1'
		ignoreFailures = true
	}

	sonarRunner {
	    sonarProperties {
		property "sonar.host.url", sonarHostUrl
		property "sonar.jdbc.url", sonarJdbcUrl
		property "sonar.jdbc.driverClassName", sonarJdbcDriverClassName
		property "sonar.jdbc.username", sonarJdbcUserName
		property "sonar.jdbc.password", sonarJdbcPassword
		property "sonar.projectName", appName
	    }
	}

	subprojects {
		sonarRunner {
			sonarProperties {
				property "sonar.sourceEncoding", "UTF-8"
			}
		}
	}

	uploadArchives{
		repositories{
			mavenDeployer{
				repository(url: releasesRepoPath){
					authentication(userName: repoUserName,password:repoPassword)
				}
			}
		}
	}
	
	publishing {
		publications {
			webApp(MavenPublication) {
				groupId mavenGroupId
				artifactId appName
				version version
			
				from components.web
			}
		}
		repositories {
			maven {
				url releasesRepoPath
				credentials {
					username = repoUserName
					password = repoPassword
				}
			}
		}
	}
	
	repositories {
		maven {
			url releasesRepoPath 
		}
	}
	configurations {
		downloadWar
	}
	println "$mavenGroupId:$appName:$project.version@war"
	dependencies {		
		downloadWar ("$mavenGroupId:$appName:$project.version@war"){ 
			 artifact {
				name = "$appName"
				extension = 'war'
				type = 'war'
			}
    		}
	}

	task downloadBinaryArchive(type: Copy) {		
		from configurations.downloadWar
		into "$buildDir\\libs"		
	}

	cargo {
	    containerId = config.server.containerId
	    port = config.server.port

	    deployable {
	    	def fileName = appName+"-"+version
	    	def filePath = "$buildDir/libs/$fileName"+".war"
		file = new File ("$buildDir/libs/$fileName"+".war")
		context = appName
	    }

	    local {
		homeDir = file(config.server.localHomeDir)
	    }
	}

	def testResultsDir
	def testReportDir
	//Integration Test
	def integrationTestReportDir = file("$buildDir/reports/tests/integration")
	def integrationTestResultsDir = file("$buildDir/test-results/integration")
	task integrationTest(type: Test) {
		description = 'Runs the integration tests.'
		group = 'verification'
		testClassesDir = sourceSets.integrationTest.output.classesDir
		classpath = sourceSets.integrationTest.runtimeClasspath
		testReportDir = integrationTestReportDir
		testResultsDir = integrationTestResultsDir
	}

	//Performance Test
	def performanceTestReportDir = file("$buildDir/reports/tests/performance")
	def performanceTestResultsDir = file("$buildDir/test-results/performance")
	task perforamnceTest(type: Test) {
		description = 'Runs the performance tests.'
		group = 'verification'
		testClassesDir = sourceSets.performanceTest.output.classesDir
		classpath = sourceSets.performanceTest.runtimeClasspath
		testReportDir = performanceTestReportDir
		testResultsDir = performanceTestResultsDir
	}

	//Functional Test
	def functionalTestReportDir = file("$buildDir/reports/tests/functional")
	def functionalTestResultsDir = file("$buildDir/test-results/functional")
	def functionalCommonSystemProperties =
		['geb.env': 'firefox',
		'geb.build.reportsDir': reporting.file("$name/geb")]
	task functionalTest(type: Test) {
		testClassesDir = sourceSets.functionalTest.output.classesDir
		classpath = sourceSets.functionalTest.runtimeClasspath
		testReportDir = functionalTestReportDir
		testResultsDir = functionalTestResultsDir
		systemProperties functionalCommonSystemProperties
		systemProperty 'geb.build.baseUrl', "http://$config.server.hostname:$config.server.port/$config.server.context/"
	}

}


